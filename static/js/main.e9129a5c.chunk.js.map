{"version":3,"sources":["clients/typicode.ts","pages/posts/tableView.tsx","pages/posts/cardsView.tsx","pages/posts/index.tsx","pages/post/index.tsx","pages/user/index.tsx","routes/routes.tsx","routes/router.tsx","serviceWorker.ts","index.tsx"],"names":["localCache","getResponseHeaders","res","Array","from","headers","entries","reduce","col","key","value","toLowerCase","getFromCacheOrFetch","url","a","fetch","then","json","body","urlBase","URL","getUrl","resource","toString","getUrlWithSearchParams","options","mapper","expand","embed","offset","limit","searchParams","Object","map","console","log","length","join","getSearchParams","executeApiCall","Client","getPosts","getPost","id","getPostComments","getUsers","getUser","getUserPosts","PostsTableView","posts","history","useHistory","Table","striped","userId","title","style","cursor","onClick","push","CardView","post","useState","user","setUser","useEffect","typicodesClient","Card","CardTitle","CardSubtitle","to","name","Button","marginTop","float","color","PostsCardView","CardColumns","tabs","Posts","pagination","setPagination","setPosts","activeTab","setActiveTab","useParams","page","pageParam","limitParam","currentPage","parseInt","pageIndex","typicodeClient","total","Math","ceil","toggleTab","tab","goToPage","p","paginationComponent","Pagination","PaginationItem","disabled","PaginationLink","first","previous","i","ix","active","next","last","Container","Row","Col","Nav","marginBottom","NavItem","NavLink","className","classnames","TabContent","TabPane","tabId","isLoading","setPost","postId","loadingPost","loadedPost","paddingTop","Progress","animated","Breadcrumb","tag","listTag","BreadcrumbItem","comments","comment","email","sm","alt","src","maxWidth","address","street","city","website","phone","path","Component","props","routes","route","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e9129a5c.chunk.js","sourcesContent":["export interface QueryOptions {\n  embed?: string;\n  expand?: string;\n  offset?: string;\n  limit?: string;\n}\n\nconst localCache: Record<string, any> = {};\n\nconst getResponseHeaders = (res: Response) =>\n  [...Array.from(res.headers.entries())].reduce(\n    (col, [key, value]) => ({ ...col, [key.toLowerCase()]: value }),\n    {}\n  );\n\nconst getFromCacheOrFetch = async (url: string) => {\n  if (!localCache[url]) {\n    localCache[url] = fetch(url).then(async (res) => ({\n      headers: getResponseHeaders(res),\n      body: await res.json(),\n    }));\n  }\n\n  return localCache[url];\n};\n\nconst host = 'https://jsonplaceholder.typicode.com/';\nconst urlBase = new URL(host);\nconst getUrl = (resource: string) => new URL(resource, urlBase).toString();\n\nconst getSearchParams = (options?: QueryOptions) => {\n  if (!options) {\n    return '';\n  }\n  const mapper: Record<string, string> = {\n    expand: '_expand',\n    embed: '_embed',\n    offset: '_start',\n    limit: '_limit',\n  };\n\n  const searchParams = Object.entries(options).map(([key, value]) => {\n    console.log({ key, value });\n    return mapper[key] ? `${mapper[key]}=${value}` : '';\n  });\n\n  console.log(searchParams);\n\n  if (searchParams.length) {\n    return `?${searchParams.join('&')}`;\n  }\n\n  return '';\n};\n\nconst getUrlWithSearchParams = (url: string, options?: QueryOptions) =>\n  getUrl(`${url}/${getSearchParams(options)}`);\n\nconst executeApiCall = (url: string, options?: QueryOptions) =>\n  getFromCacheOrFetch(getUrl(getUrlWithSearchParams(url, options)));\n\nconst Client = {\n  getPosts: (options = {}) => executeApiCall('posts', options),\n  getPost: (id: number, options = {}) => executeApiCall(`posts/${id}`, options),\n  getPostComments: (id: number, options = {}) =>\n    executeApiCall(`posts/${id}/comments`, options),\n  getUsers: (options = {}) => executeApiCall('users', options),\n  getUser: (id: number, options = {}) => executeApiCall(`users/${id}`, options),\n  getUserPosts: (id: number, options = {}) =>\n    executeApiCall(`users/${id}/posts`, options),\n};\n\nexport default Client;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Table } from 'reactstrap';\nimport { Post } from '../../types/post';\n\nconst PostsTableView = ({ posts }: { posts: Post[] }) => {\n  const history = useHistory();\n\n  return (\n    <Table striped>\n      <thead>\n        <tr>\n          <th>id</th>\n          <th>userId</th>\n          <th>Title</th>\n        </tr>\n      </thead>\n      <tbody>\n        {posts.map(({ id, userId, title }) => (\n          <tr\n            key={`post-${id}`}\n            style={{ cursor: 'pointer' }}\n            onClick={() => history.push(`/post/${id}`)}\n          >\n            <td>{id}</td>\n            <td>{userId}</td>\n            <td>{title}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default PostsTableView;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { Card, CardColumns, CardTitle, CardSubtitle, Button } from 'reactstrap';\nimport { Post } from '../../types/post';\nimport typicodesClient from '../../clients/typicode';\nimport { User } from '../../types/user';\n\nconst CardView = ({ post }: { post: Post }) => {\n  const history = useHistory();\n  const [user, setUser] = useState<User | null>(null);\n  useEffect(() => {\n    if (post.userId) {\n      typicodesClient.getUser(post.userId).then(({ body }) => setUser(body));\n    }\n  }, [post.userId]);\n  return (\n    <Card body>\n      <CardTitle>\n        <h4>{post.title}</h4>\n      </CardTitle>\n      <CardSubtitle>\n        by:{' '}\n        {!!user && (\n          <Link to={`/user/${user.id}`}>\n            <b>{user.name}</b>\n          </Link>\n        )}\n      </CardSubtitle>\n      <Button\n        style={{ marginTop: 15, float: 'right' }}\n        color=\"primary\"\n        onClick={() => history.push(`/post/${post.id}`)}\n      >\n        Read\n      </Button>\n    </Card>\n  );\n};\n\nconst PostsCardView = ({ posts }: { posts: Post[] }) => {\n  return (\n    <CardColumns>\n      {posts.map((post) => (\n        <CardView post={post} />\n      ))}\n    </CardColumns>\n  );\n};\n\nexport default PostsCardView;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n  Pagination,\n  PaginationItem,\n  PaginationLink,\n} from 'reactstrap';\nimport classnames from 'classnames';\nimport { useParams, useHistory, Redirect } from 'react-router-dom';\nimport typicodeClient, { QueryOptions } from '../../clients/typicode';\nimport PostsTableView from './tableView';\nimport PostsCardView from './cardsView';\nimport { Post } from '../../types/post';\n\nconst tabs = {\n  tableView: 'tableView',\n  cardView: 'cardView',\n};\n\nconst Posts = () => {\n  const history = useHistory();\n  const [pagination, setPagination] = useState<Record<string, any>>({});\n  const [posts, setPosts] = useState<Post[] | []>([]);\n  const [activeTab, setActiveTab] = useState(tabs.tableView);\n  let { page: pageParam = '1', limit: limitParam = '10' } = useParams<{\n    page: string;\n    limit: string;\n  }>();\n\n  const currentPage = parseInt(pageParam);\n  const pageIndex = currentPage - 1;\n  const limit = parseInt(limitParam);\n\n  const getPosts = async (options: QueryOptions) => {\n    try {\n      const { body, headers } = await typicodeClient.getPosts(options);\n      if (options.limit && options.offset) {\n        setPagination({\n          total: Math.ceil(\n            parseInt(headers['x-total-count']) / parseInt(options.limit)\n          ),\n          offset: options.offset,\n          limit: options.limit,\n        });\n      }\n      setPosts(body);\n    } catch (error) {\n      console.log('Silently catch error.', error);\n    }\n  };\n\n  useEffect(() => {\n    getPosts({ offset: `${pageIndex * limit}`, limit: `${limit}` });\n  }, [pageIndex, limit]);\n\n  const toggleTab = (tab: string) => {\n    if (activeTab !== tab) setActiveTab(tab);\n  };\n\n  const goToPage = (p: number) => () => history.push(`/${p}/${limit}`);\n  const paginationComponent = pagination.total ? (\n    <Pagination>\n      <PaginationItem disabled={currentPage <= 1}>\n        <PaginationLink first onClick={goToPage(1)} />\n      </PaginationItem>\n      <PaginationItem disabled={currentPage <= 1}>\n        <PaginationLink previous onClick={goToPage(currentPage - 1)} />\n      </PaginationItem>\n      {[...Array(pagination.total)].map((i, ix) => (\n        <PaginationItem key={ix} active={ix === pageIndex}>\n          <PaginationLink onClick={goToPage(ix + 1)}>{ix + 1}</PaginationLink>\n        </PaginationItem>\n      ))}\n      <PaginationItem disabled={currentPage >= pagination.total}>\n        <PaginationLink next onClick={goToPage(currentPage + 1)} />\n      </PaginationItem>\n      <PaginationItem disabled={currentPage >= pagination.total}>\n        <PaginationLink last onClick={goToPage(pagination.total)} />\n      </PaginationItem>\n    </Pagination>\n  ) : null;\n\n  if (currentPage > pagination.total) {\n    return <Redirect to={`/${pagination.total}/${limit}`} />;\n  }\n  if (currentPage < 1) {\n    return <Redirect to={`/1/${limit}`} />;\n  }\n\n  return (\n    <Container>\n      <Row style={{ marginTop: 20 }}>\n        <Col>\n          <Nav tabs style={{ marginBottom: 15 }}>\n            <NavItem>\n              <NavLink\n                className={classnames({ active: activeTab === tabs.tableView })}\n                onClick={() => {\n                  toggleTab(tabs.tableView);\n                }}\n              >\n                Table View\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                className={classnames({ active: activeTab === tabs.cardView })}\n                onClick={() => {\n                  toggleTab(tabs.cardView);\n                }}\n              >\n                Cards View\n              </NavLink>\n            </NavItem>\n          </Nav>\n          <TabContent activeTab={activeTab}>\n            <TabPane tabId={tabs.tableView}>\n              <PostsTableView posts={posts} />\n            </TabPane>\n            <TabPane tabId={tabs.cardView}>\n              <PostsCardView posts={posts} />\n            </TabPane>\n          </TabContent>\n          {paginationComponent}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Posts;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport {\n  Container,\n  Row,\n  Col,\n  Table,\n  Breadcrumb,\n  BreadcrumbItem,\n  Progress,\n} from 'reactstrap';\nimport typicodeClient from '../../clients/typicode';\nimport { Post } from '../../types/post';\nimport { Comment } from '../../types/comment';\n\ninterface LoadingPost {\n  isLoading: boolean;\n}\n\nconst Posts = () => {\n  const [post, setPost] = useState<Post | LoadingPost>({ isLoading: true });\n  let { id: postId } = useParams<{ id: string }>();\n\n  const loadingPost = post as LoadingPost;\n  const loadedPost = post as Post;\n\n  useEffect(() => {\n    typicodeClient\n      .getPost(parseInt(postId), {\n        expand: 'user',\n        embed: 'comments',\n      })\n      .then(({ body }) => setPost(body));\n  }, [postId]);\n\n  if (loadingPost.isLoading) {\n    return (\n      <Container style={{ paddingTop: 20 }}>\n        <Row>\n          <Col>\n            <Progress striped animated color=\"info\" value={100} />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  return (\n    <Container style={{ paddingTop: 20 }}>\n      <Row>\n        <Col>\n          <Breadcrumb tag=\"nav\" listTag=\"div\">\n            <BreadcrumbItem>\n              <Link to=\"/\">Posts</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem active tag=\"span\">\n              post\n            </BreadcrumbItem>\n          </Breadcrumb>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <h2>{loadedPost.title}</h2>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <h5>\n            by:{' '}\n            {!!loadedPost.user && (\n              <Link to={`/user/${loadedPost.user.id}`}>\n                {loadedPost.user.name}\n              </Link>\n            )}\n          </h5>\n        </Col>\n      </Row>\n      <Row>\n        <Col>{loadedPost.body}</Col>\n      </Row>\n\n      <h3 style={{ marginTop: 50 }}> Comments: </h3>\n      <hr />\n      <Table striped>\n        <tbody>\n          {loadedPost.comments?.map((comment: Comment) => (\n            <tr key={comment.id}>\n              <td>\n                <b>{comment.name}</b>\n                <br />\n                by {comment.email}\n                <br />\n                {comment.body}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Container>\n  );\n};\n\nexport default Posts;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Container, Row, Col, Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport typicodeClient from '../../clients/typicode';\nimport { User } from '../../types/user';\nimport PostsCardView from '../posts/cardsView';\n\nconst Posts = () => {\n  const [user, setUser] = useState<User | null>(null);\n  let { userId } = useParams<{ userId: string }>();\n\n  useEffect(() => {\n    typicodeClient\n      .getUser(parseInt(userId), { embed: 'posts' })\n      .then(({ body }) => setUser(body));\n  }, [userId]);\n\n  const randomProfilePictures = [\n    'https://tinyfac.es/data/avatars/282A12CA-E0D7-4011-8BDD-1FAFAAB035F7-500w.jpeg',\n    'https://tinyfac.es/data/avatars/B3CF5288-34B0-4A5E-9877-5965522529D6-500w.jpeg',\n    'https://tinyfac.es/data/avatars/E0B4CAB3-F491-4322-BEF2-208B46748D4A-500w.jpeg',\n    'https://tinyfac.es/data/avatars/344CFC24-61FB-426C-B3D1-CAD5BCBD3209-500w.jpeg',\n    'https://tinyfac.es/data/avatars/A7299C8E-CEFC-47D9-939A-3C8CA0EA4D13-500w.jpeg',\n    'https://tinyfac.es/data/avatars/1C4EEDC2-FE9C-40B3-A2C9-A038873EE692-500w.jpeg',\n    'https://tinyfac.es/data/avatars/2DDDE973-40EC-4004-ABC0-73FD4CD6D042-500w.jpeg',\n    'https://tinyfac.es/data/avatars/BA0CB1F2-8C79-4376-B13B-DD5FB8772537-500w.jpeg',\n    'https://tinyfac.es/data/avatars/FBEBF655-4886-455A-A4A4-D62B77DD419B-500w.jpeg',\n    'https://tinyfac.es/data/avatars/26CFEFB3-21C8-49FC-8C19-8E6A62B6D2E0-500w.jpeg',\n    'https://tinyfac.es/data/avatars/852EC6E1-347C-4187-9D42-DF264CCF17BF-500w.jpeg',\n    'https://tinyfac.es/data/avatars/03F55412-DE8A-4F83-AAA6-D67EE5CE48DA-500w.jpeg',\n    'https://tinyfac.es/data/avatars/AEF44435-B547-4B84-A2AE-887DFAEE6DDF-500w.jpeg',\n  ];\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <Container style={{ paddingTop: 20 }}>\n      <Row>\n        <Col>\n          <Breadcrumb tag=\"nav\" listTag=\"div\">\n            <BreadcrumbItem>\n              <Link to=\"/\">Posts</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem tag=\"span\">Users</BreadcrumbItem>\n            <BreadcrumbItem active tag=\"span\">\n              {user.name}\n            </BreadcrumbItem>\n          </Breadcrumb>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={3}>\n          {user?.id && (\n            <img\n              alt=\"User profile\"\n              src={randomProfilePictures[user.id]}\n              style={{ maxWidth: '100%' }}\n              className=\"img-rounded\"\n            />\n          )}\n        </Col>\n        <Col sm={4}>\n          <p>{user.name}</p>\n          <cite title=\"Source Title\">\n            {user.address?.street}, {user.address?.city}{' '}\n            <i className=\"fa fa-map-marker\"></i>\n          </cite>\n          <p>\n            <i className=\"fa fa-envelope\"></i> {user.email} <br />\n            <i className=\"fa fa-globe\"></i> {user.website} <br />\n            <i className=\"fa fa-phone\"></i> {user.phone}\n          </p>\n        </Col>\n      </Row>\n      {user.posts && (\n        <Row style={{ marginTop: 30 }}>\n          <Col>\n            <h3>My posts: </h3>\n            <hr />\n            <PostsCardView posts={user.posts} />\n          </Col>\n        </Row>\n      )}\n    </Container>\n  );\n};\n\nexport default Posts;\n","import React from 'react';\nimport Posts from '../pages/posts';\nimport Post from '../pages/post';\nimport User from '../pages/user';\n\nexport default [\n  {\n    path: '/post/:id',\n    Component: (props: Record<any, any>) => <Post {...props} />,\n  },\n  {\n    path: '/user/:userId',\n    Component: (props: Record<any, any>) => <User {...props} />,\n  },\n  {\n    path: '/:page/:limit',\n    Component: (props: Record<any, any>) => <Posts {...props} />,\n  },\n  {\n    path: '/:page',\n    Component: (props: Record<any, any>) => <Posts {...props} />,\n  },\n  {\n    path: '/',\n    Component: (props: Record<any, any>) => <Posts {...props} />,\n  },\n];\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport routes from './routes'\n\nexport default () => (\n  <Router>\n    <Switch>\n      {routes.map((route, i) => (\n        <Route \n          key={i}\n          path={route.path}\n          render={props => <route.Component {...props} />}\n        />\n      ))}\n    </Switch>\n  </Router>\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './routes/router';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}