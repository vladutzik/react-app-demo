{"version":3,"sources":["clients/typicode.ts","pages/posts/tableView.tsx","pages/posts/cardsView.tsx","pages/posts/index.tsx","pages/post/index.tsx","pages/user/index.tsx","routes/routes.tsx","routes/router.tsx","serviceWorker.ts","index.tsx"],"names":["localCache","getFromCacheOrFetch","url","a","fetch","then","res","json","urlBase","URL","getUrl","resource","toString","Client","getPosts","getPost","id","getPostComments","getUsers","getUser","getUserPosts","PostsTableView","posts","history","useHistory","Table","striped","map","userId","title","key","style","cursor","onClick","push","CardView","post","useState","user","setUser","useEffect","typicodesClient","Card","body","CardTitle","CardSubtitle","to","name","Button","marginTop","float","color","PostsCardView","CardColumns","tabs","Posts","setPosts","activeTab","setActiveTab","typicodeClient","toggleTab","tab","Container","Row","Col","Nav","marginBottom","NavItem","NavLink","className","classnames","active","TabContent","TabPane","tabId","isLoading","setPost","comments","setComments","postId","useParams","loadingPost","loadedPost","parseInt","fetchedPost","paddingTop","Progress","animated","value","Breadcrumb","tag","listTag","BreadcrumbItem","comment","email","sm","alt","src","maxWidth","address","street","city","website","phone","path","Component","props","routes","route","i","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.64edbafb.chunk.js","sourcesContent":["const localCache: Record<string, any> = {};\n\nconst getFromCacheOrFetch = async (url: string) => {\n  if (!localCache[url]) {\n    localCache[url] = fetch(url).then((res) => res.json());\n  }\n\n  return localCache[url];\n};\n\nconst host = 'https://jsonplaceholder.typicode.com/';\nconst urlBase = new URL(host);\nconst getUrl = (resource: string) => new URL(resource, urlBase).toString();\n\nconst Client = {\n  getPosts: async () => getFromCacheOrFetch(getUrl('posts')),\n  getPost: async (id: number) => getFromCacheOrFetch(getUrl(`posts/${id}`)),\n  getPostComments: async (id: number) =>\n    getFromCacheOrFetch(getUrl(`posts/${id}/comments`)),\n  getUsers: async () => getFromCacheOrFetch(getUrl('users')),\n  getUser: async (id: number) => getFromCacheOrFetch(getUrl(`users/${id}`)),\n  getUserPosts: async (id: number) =>\n    getFromCacheOrFetch(getUrl(`users/${id}/posts`)),\n};\n\nexport default Client;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Table } from 'reactstrap';\nimport { Post } from '../../types/post';\n\nconst PostsTableView = ({ posts }: { posts: Post[] }) => {\n  const history = useHistory();\n\n  return (\n    <Table striped>\n      <thead>\n        <tr>\n          <th>id</th>\n          <th>userId</th>\n          <th>Title</th>\n        </tr>\n      </thead>\n      <tbody>\n        {posts.map(({ id, userId, title }) => (\n          <tr\n            key={`post-${id}`}\n            style={{ cursor: 'pointer' }}\n            onClick={() => history.push(`/post/${id}`)}\n          >\n            <td>{id}</td>\n            <td>{userId}</td>\n            <td>{title}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default PostsTableView;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { Card, CardColumns, CardTitle, CardSubtitle, Button } from 'reactstrap';\nimport { Post } from '../../types/post';\nimport typicodesClient from '../../clients/typicode';\nimport { User } from '../../types/user';\n\nconst CardView = ({ post }: { post: Post }) => {\n  const history = useHistory();\n  const [user, setUser] = useState<User | null>(null);\n  useEffect(() => {\n    if (post.userId) {\n      typicodesClient.getUser(post.userId).then(setUser);\n    }\n  }, [post.userId]);\n  return (\n    <Card body>\n      <CardTitle>\n        <h4>{post.title}</h4>\n      </CardTitle>\n      <CardSubtitle>\n        by:{' '}\n        {!!user && (\n          <Link to={`/user/${user.id}`}>\n            <b>{user.name}</b>\n          </Link>\n        )}\n      </CardSubtitle>\n      <Button\n        style={{ marginTop: 15, float: 'right' }}\n        color=\"primary\"\n        onClick={() => history.push(`/post/${post.id}`)}\n      >\n        Read\n      </Button>\n    </Card>\n  );\n};\n\nconst PostsCardView = ({ posts }: { posts: Post[] }) => {\n  return (\n    <CardColumns>\n      {posts.map((post) => (\n        <CardView post={post} />\n      ))}\n    </CardColumns>\n  );\n};\n\nexport default PostsCardView;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n} from 'reactstrap';\nimport classnames from 'classnames';\nimport typicodeClient from '../../clients/typicode';\nimport PostsTableView from './tableView';\nimport PostsCardView from './cardsView';\nimport { Post } from '../../types/post';\n\nconst tabs = {\n  tableView: 'tableView',\n  cardView: 'cardView',\n};\n\nconst Posts = () => {\n  const [posts, setPosts] = useState<Post[] | []>([]);\n  const [activeTab, setActiveTab] = useState(tabs.tableView);\n\n  useEffect(() => {\n    typicodeClient.getPosts().then(setPosts);\n  }, []);\n\n  const toggleTab = (tab: string) => {\n    if (activeTab !== tab) setActiveTab(tab);\n  };\n\n  return (\n    <Container>\n      <Row style={{ marginTop: 20 }}>\n        <Col>\n          <Nav tabs style={{ marginBottom: 15 }}>\n            <NavItem>\n              <NavLink\n                className={classnames({ active: activeTab === tabs.tableView })}\n                onClick={() => {\n                  toggleTab(tabs.tableView);\n                }}\n              >\n                Table View\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                className={classnames({ active: activeTab === tabs.cardView })}\n                onClick={() => {\n                  toggleTab(tabs.cardView);\n                }}\n              >\n                Cards View\n              </NavLink>\n            </NavItem>\n          </Nav>\n          <TabContent activeTab={activeTab}>\n            <TabPane tabId={tabs.tableView}>\n              <PostsTableView posts={posts} />\n            </TabPane>\n            <TabPane tabId={tabs.tableView}>\n              <PostsCardView posts={posts} />\n            </TabPane>\n          </TabContent>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Posts;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport {\n  Container,\n  Row,\n  Col,\n  Table,\n  Breadcrumb,\n  BreadcrumbItem,\n  Progress,\n} from 'reactstrap';\nimport typicodeClient from '../../clients/typicode';\nimport { Post } from '../../types/post';\nimport { Comment } from '../../types/comment';\nimport { User } from '../../types/user';\n\ninterface LoadingPost {\n  isLoading: boolean;\n}\n\nconst Posts = () => {\n  const [post, setPost] = useState<Post | LoadingPost>({ isLoading: true });\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [user, setUser] = useState<User | null>(null);\n  let { id: postId } = useParams<{ id: string }>();\n\n  const loadingPost = post as LoadingPost;\n  const loadedPost = post as Post;\n\n  useEffect(() => {\n    typicodeClient.getPost(parseInt(postId)).then((fetchedPost) => {\n      setPost(fetchedPost);\n      typicodeClient.getUser(fetchedPost.userId).then(setUser);\n    });\n    typicodeClient.getPostComments(parseInt(postId)).then(setComments);\n  }, [postId]);\n\n  if (loadingPost.isLoading) {\n    return (\n      <Container style={{ paddingTop: 20 }}>\n        <Row>\n          <Col>\n            <Progress striped animated color=\"info\" value={100} />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  return (\n    <Container style={{ paddingTop: 20 }}>\n      <Row>\n        <Col>\n          <Breadcrumb tag=\"nav\" listTag=\"div\">\n            <BreadcrumbItem>\n              <Link to=\"/\">Posts</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem active tag=\"span\">\n              post\n            </BreadcrumbItem>\n          </Breadcrumb>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <h2>{loadedPost.title}</h2>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <h5>\n            by: {!!user && <Link to={`/user/${user.id}`}>{user.name}</Link>}\n          </h5>\n        </Col>\n      </Row>\n      <Row>\n        <Col>{loadedPost.body}</Col>\n      </Row>\n\n      <h3 style={{ marginTop: 50 }}> Comments: </h3>\n      <hr />\n      <Table striped>\n        <tbody>\n          {comments.map((comment: Comment) => (\n            <tr key={comment.id}>\n              <td>\n                <b>{comment.name}</b>\n                <br />\n                by {comment.email}\n                <br />\n                {comment.body}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Container>\n  );\n};\n\nexport default Posts;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Container, Row, Col, Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport typicodeClient from '../../clients/typicode';\nimport { Post } from '../../types/post';\nimport { User } from '../../types/user';\nimport PostsCardView from '../posts/cardsView';\n\nconst Posts = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [user, setUser] = useState<User>({});\n  let { userId } = useParams<{ userId: string }>();\n\n  useEffect(() => {\n    typicodeClient.getUser(parseInt(userId)).then(setUser);\n    typicodeClient.getUserPosts(parseInt(userId)).then(setPosts);\n  }, [userId]);\n\n  const randomProfilePictures = [\n    'https://tinyfac.es/data/avatars/282A12CA-E0D7-4011-8BDD-1FAFAAB035F7-500w.jpeg',\n    'https://tinyfac.es/data/avatars/B3CF5288-34B0-4A5E-9877-5965522529D6-500w.jpeg',\n    'https://tinyfac.es/data/avatars/E0B4CAB3-F491-4322-BEF2-208B46748D4A-500w.jpeg',\n    'https://tinyfac.es/data/avatars/344CFC24-61FB-426C-B3D1-CAD5BCBD3209-500w.jpeg',\n    'https://tinyfac.es/data/avatars/A7299C8E-CEFC-47D9-939A-3C8CA0EA4D13-500w.jpeg',\n    'https://tinyfac.es/data/avatars/1C4EEDC2-FE9C-40B3-A2C9-A038873EE692-500w.jpeg',\n    'https://tinyfac.es/data/avatars/2DDDE973-40EC-4004-ABC0-73FD4CD6D042-500w.jpeg',\n    'https://tinyfac.es/data/avatars/BA0CB1F2-8C79-4376-B13B-DD5FB8772537-500w.jpeg',\n    'https://tinyfac.es/data/avatars/FBEBF655-4886-455A-A4A4-D62B77DD419B-500w.jpeg',\n    'https://tinyfac.es/data/avatars/26CFEFB3-21C8-49FC-8C19-8E6A62B6D2E0-500w.jpeg',\n    'https://tinyfac.es/data/avatars/852EC6E1-347C-4187-9D42-DF264CCF17BF-500w.jpeg',\n    'https://tinyfac.es/data/avatars/03F55412-DE8A-4F83-AAA6-D67EE5CE48DA-500w.jpeg',\n    'https://tinyfac.es/data/avatars/AEF44435-B547-4B84-A2AE-887DFAEE6DDF-500w.jpeg',\n  ];\n\n  return (\n    <Container style={{ paddingTop: 20 }}>\n      <Row>\n        <Col>\n          <Breadcrumb tag=\"nav\" listTag=\"div\">\n            <BreadcrumbItem>\n              <Link to=\"/\">Posts</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem tag=\"span\">Users</BreadcrumbItem>\n            <BreadcrumbItem active tag=\"span\">\n              {user.name}\n            </BreadcrumbItem>\n          </Breadcrumb>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={3}>\n          {user?.id && (\n            <img\n              alt=\"User profile\"\n              src={randomProfilePictures[user.id]}\n              style={{ maxWidth: '100%' }}\n              className=\"img-rounded\"\n            />\n          )}\n        </Col>\n        <Col sm={4}>\n          <p>{user.name}</p>\n          <cite title=\"Source Title\">\n            {user.address?.street}, {user.address?.city}{' '}\n            <i className=\"fa fa-map-marker\"></i>\n          </cite>\n          <p>\n            <i className=\"fa fa-envelope\"></i> {user.email} <br />\n            <i className=\"fa fa-globe\"></i> {user.website} <br />\n            <i className=\"fa fa-phone\"></i> {user.phone}\n          </p>\n        </Col>\n      </Row>\n      <Row style={{ marginTop: 30 }}>\n        <Col>\n          <h3>My posts: </h3>\n          <hr />\n          <PostsCardView posts={posts} />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Posts;\n","import React from 'react';\nimport Posts from '../pages/posts';\nimport Post from '../pages/post';\nimport User from '../pages/user';\n\nexport default [\n  {\n    path: '/post/:id',\n    Component: (props: Record<any, any>) => <Post {...props} />,\n  },\n  {\n    path: '/user/:userId',\n    Component: (props: Record<any, any>) => <User {...props} />,\n  },\n  {\n    path: '/',\n    Component: (props: Record<any, any>) => <Posts {...props} />,\n  },\n];\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport routes from './routes'\n\nexport default () => (\n  <Router>\n    <Switch>\n      {routes.map((route, i) => (\n        <Route \n          key={i}\n          path={route.path}\n          render={props => <route.Component {...props} />}\n        />\n      ))}\n    </Switch>\n  </Router>\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './routes/router';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}